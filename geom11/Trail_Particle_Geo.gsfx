#if !defined(DIVIDE)
	#define DIVIDE 4
#endif

struct Particle {
	#if defined(COMPOSITESTRUCT)
  		COMPOSITESTRUCT
 	#else
		float3 position;
	#endif
};

#define TWO_PI 6.28318530718

struct Trail{
	int currentNodeIdx;
};

struct Node{
	float time;
	float3 pos;
};

Texture2D texture2d <string uiname="Texture";>;
StructuredBuffer<Trail> TrailBuffer;
StructuredBuffer<Node> NodeBuffer;

StructuredBuffer<Particle> ParticleBuffer;
StructuredBuffer<uint> AlivePointerBuffer;

uint NodeCount;
float Life;
float ConnectDisMax;


float Time;

float wid;
bool sol<string uiname = "SizeofOverLife";> = 1;

float4 scol <bool color = true; string uiname = "Start Color";> = float4(1,1,1,1);
float4 ecol <bool color = true; string uiname = "End Color";> = float4(0,0,0,0);

int ToNodeBufIdx(int trailIdx, int nodeIdx){
	nodeIdx %= NodeCount;
	return trailIdx * NodeCount + nodeIdx;
}

Node GetNode(int trailIdx, int nodeIdx){
	return NodeBuffer[ToNodeBufIdx(trailIdx, nodeIdx)];
}

bool IsValid(Node node){
	return node.time > 0;
}

SamplerState linearSampler : IMMUTABLE{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

cbuffer cbPerDraw : register( b0 ){
	float4x4 tVP : LAYERVIEWPROJECTION;
};

cbuffer cbPerObj : register( b1 ){
	float4x4 tW : WORLD;
	float4x4 tV : VIEW;
	float4x4 tVI : VIEWINVERSE;
	float4x4 tWVP : WORLDVIEWPROJECTION;
	float4 cAmb <bool color=true;String uiname="Color";> = { 1.0f,1.0f,1.0f,1.0f };
};

struct VS_IN{
	uint id : SV_VertexID;
	uint iid : SV_InstanceID;
};

struct vsout {
	float4 pos : POSITION0;
	float3 dir : TANGENT0;
	float4 col : COLOR0;
	float4 posNext: POSITION1;
	float3 dirNext : TANGENT1;
	float4 colNext : COLOR1;
	float width : TEXCOORD2;
	float ageRate : TEXCOORD0;
	float ageRateNext : TEXCOORD1;
	float2 uv : TEXCOORD3;
};

struct gsout{
	float4 pos : Position;
	float3 col : COLOR2;
	float3 norm : NORMAL;
	float2 uv : TEXCOORD4;
};

float3x3 rot3D(float3 axis, float angle)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
        t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
        t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
    );
}

vsout VS_particle(VS_IN input){
	vsout output;
	Trail trail = TrailBuffer[input.iid];
	int currentNodeIdx = trail.currentNodeIdx;
	
	Node node0 = GetNode(input.iid, input.id - 1);
	Node node1 = GetNode(input.iid, input.id);
	Node node2 = GetNode(input.iid, input.id + 1);
	Node node3 = GetNode(input.iid, input.id + 2);
	
	bool isLastNode = (currentNodeIdx == (int)input.id);
	
	if(isLastNode || !IsValid(node1)){
		node0 = node1 = node2 = node3 = GetNode(input.iid, currentNodeIdx);
	}
	
	float3 pos1 = node1.pos;
	float3 pos0 = IsValid(node0) ? node0.pos : pos1;
	float3 pos2 = IsValid(node2) ? node2.pos : pos1;
	float3 pos3 = IsValid(node3) ? node3.pos : pos2;
	
	float time1 = node1.time;
	float time2 = IsValid(node2) ? node2.time : time1;
	
	uint particleIndex = AlivePointerBuffer[input.iid];
	float width = 1;
	float4 col = float4(1,1,1,1);
	
	
	#if defined(KNOW_SCALE)
       width = ParticleBuffer[input.iid].scale;
    #endif
	#if defined(KNOW_COLOR)
       col = ParticleBuffer[input.iid].color;
    #endif

	
	output.pos = float4(pos1, 1);
	output.posNext = float4(pos2, 1);
	
	output.uv = float2(time1, time2);
	
	output.dir = normalize(pos2 - pos0);
	output.dirNext = normalize(pos3 - pos1);
	
	float ageRate = saturate((Time - node1.time) / Life);
	float ageRateNext = saturate((Time - node2.time) / Life);
	output.ageRate = ageRate;
	output.ageRateNext = ageRateNext;
	
	output.col = lerp(scol * col, ecol * col, ageRate);
	output.colNext = lerp(scol * col, ecol * col, ageRateNext);
	
	output.width = width;
	

	
	return output;
}

[maxvertexcount(4)]
void Geom_Flat(point vsout input[1], inout TriangleStream<gsout> outStream){
	gsout output0, output1, output2, output3;
	float3 pos = input[0].pos.xyz;
	float3 dir = input[0].dir;
	float3 posNext = input[0].posNext.xyz;
	float3 dirNext = input[0].dirNext;
	
	float dist = distance(pos, posNext);
	if(dist > ConnectDisMax){
		posNext = pos;
	}
	
	float ageRate = sol ? 1 - input[0].ageRate : 1;
	float ageRateNext = sol ? 1 - input[0].ageRateNext : 1;
	
	float3 camPos = tVI[3].xyz;
	float3 toCamDir = normalize(camPos - pos);
	float3 sideDir = normalize(cross(toCamDir, dir));
	
	float3 toCamDirNext = normalize(camPos - posNext);
	float3 sideDirNext = normalize(cross(toCamDirNext, dirNext));
	
	sideDir = lerp(sideDir, -sideDir, step(dot(sideDir, sideDirNext), 0));
	
	float width = wid * .01 * input[0].width;
	
	output0.pos = float4(pos + (sideDir * width * ageRate), 1);
	output1.pos = float4(pos - (sideDir * width * ageRate), 1);
	output2.pos = float4(posNext + (sideDirNext * width * ageRateNext), 1);
	output3.pos = float4(posNext - (sideDirNext * width * ageRateNext), 1);
	
	output0.col =
	output1.col = input[0].col.rgb;
	output2.col =
	output3.col = input[0].colNext.rgb;
	
	output0.norm =
	output1.norm = 
	output2.norm =
	output3.norm = toCamDir;
	
	output0.uv = fmod(float2(input[0].uv.x, 0), 1.01) * float2(50, 1);
	output1.uv = fmod(float2(input[0].uv.x, 1), 1.01) * float2(50, 1);
	output2.uv = fmod(float2(input[0].uv.y, 0), 1.01) * float2(50, 1);
	output3.uv = fmod(float2(input[0].uv.y, 1), 1.01) * float2(50, 1);
	
	outStream.Append(output0);
	outStream.Append(output1);
	outStream.Append(output2);
	outStream.Append(output3);
	outStream.RestartStrip();
}

GeometryShader StreamOutGSFlat = ConstructGSWithSO( CompileShader( gs_4_0,Geom_Flat() ), 
								"Position.xyzw;COLOR2.xyz;NORMAL.xyz;TEXCOORD4.xy",
								NULL,NULL,NULL,-1 );

[maxvertexcount(DIVIDE*4)]
void Geom_Tube(point vsout input[1], inout TriangleStream<gsout> outStream){
	gsout output0, output1, output2, output3;
	float3 pos = input[0].pos.xyz;
	float3 dir = input[0].dir;
	float3 posNext = input[0].posNext.xyz;
	float3 dirNext = input[0].dirNext;
	float3 up = float3(0,1,0);
	
	if(distance(pos, posNext) > ConnectDisMax){
		posNext = pos;
	}
	
	float ageRate = sol ? 1 - input[0].ageRate : 1;
	float ageRateNext = sol ? 1 - input[0].ageRateNext : 1;
	
	float width = wid * .01 * input[0].width;
	
	float3 xDir = normalize(cross(up, dir));
	float3 yDir = normalize(cross(xDir, dir));
	float3 xDirNext = normalize(cross(up, dirNext));
	float3 yDirNext = normalize(cross(xDirNext, dirNext));
	
	float divrate = 1 / (float)DIVIDE;
	float3x3 mat = rot3D(dir, TWO_PI *divrate);
	float3x3 matNext = rot3D(dirNext, TWO_PI *divrate);
	
	float3 rotyDir = normalize(mul(yDir, mat));
	float3 rotyDirNext = normalize(mul(yDirNext, matNext));
	
	for(uint i = 0; i < DIVIDE; i++){
		output0.pos = float4(pos + (yDir * width * ageRate), 1);
		output1.pos = float4(pos + (rotyDir * width * ageRate), 1);
		output2.pos = float4(posNext + (yDirNext * width * ageRateNext), 1);
		output3.pos = float4(posNext + (rotyDirNext * width * ageRateNext), 1);
	
		output0.col =
		output1.col = input[0].col.rgb;
		output2.col =
		output3.col = input[0].colNext.rgb;
	
		output0.norm = yDir;
		output1.norm = rotyDir;
		output2.norm = yDirNext;
		output3.norm = rotyDirNext;
	
		output0.uv = fmod(float2(input[0].uv.x, i*divrate), 1.01) * float2(50, 1);
		output1.uv = fmod(float2(input[0].uv.x, (i+1)*divrate), 1.01) * float2(50, 1);
		output2.uv = fmod(float2(input[0].uv.y, i*divrate), 1.01) * float2(50, 1);
		output3.uv = fmod(float2(input[0].uv.y, (i+1)*divrate), 1.01) * float2(50, 1);
	
		outStream.Append(output0);
		outStream.Append(output2);
		outStream.Append(output1);
		outStream.Append(output3);
		
		outStream.RestartStrip();
		
		yDir = rotyDir;
		yDirNext = rotyDirNext;
		rotyDir = mul(rotyDir, mat);
		rotyDirNext = mul(rotyDirNext, matNext);
	}
}

GeometryShader StreamOutGSTube = ConstructGSWithSO( CompileShader( gs_4_0,Geom_Tube() ), 
								"Position.xyzw;COLOR2.xyz;NORMAL.xyz;TEXCOORD4.xy",
								NULL,NULL,NULL,-1 );

technique10 Trail_Flat
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_4_0, VS_particle() ) );
		SetGeometryShader( StreamOutGSFlat );
	}
}

technique10 Trail_Tube
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_4_0, VS_particle() ) );
		SetGeometryShader( StreamOutGSTube );
	}
}